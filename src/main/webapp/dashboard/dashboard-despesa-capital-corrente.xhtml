<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//PT"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core"
      xmlns:fc="http://java.sun.com/jsf/composite/components"
      xmlns:co="http://java.sun.com/jsf/composite/components/contabil"
      xmlns:p="http://primefaces.org/ui"
>

<ui:composition template="/corpo.xhtml">
    <ui:define name="body">

        <h:form id="Formulario" style="background-color: #eaeaea!important;">

            <p:panel>

                <div style="text-align: center!important; ">
                    <img src="/img/graph.jpg" width="40" height="40" alt="imagem de um gráfico"
                         style="margin-top: 10px!important;"/>
                    <h1> DASHBOARD DISTRIBUIÇÃO E COMPARATIVO DA DESPESA POR CATEGORIA ECONÔMICA</h1>
                </div>

                <div class="row">
                    <div class="col-md-3 col-md-offset-2">
                        <h3>Selecione o tipo de dados</h3>
                        <div class="btn-group">
                            <button type="button" class="btn btn-primary active" id="quantidade"
                                    onclick="atribuirTipo(false)">Quantidade
                            </button>
                            <button type="button" class="btn btn-primary" id="procentagem"
                                    onclick="atribuirTipo(true)">Porcentagem
                            </button>
                        </div>
                    </div>

                    <div class="col-md-3">
                        <h3> Selecione o tipo do grafico</h3>
                        <div class="btn-group">
                            <button type="button" class="btn btn-primary active" id="barra"
                                    onclick="atribuirDashBoard('bar')">Barra
                            </button>
                            <button type="button" class="btn btn-primary" id="linha"
                                    onclick="atribuirDashBoard('line')">Linha
                            </button>
                            <button type="button" class="btn btn-primary" id="pizza"
                                    onclick="atribuirDashBoard('pie')">Pizza
                            </button>
                        </div>
                    </div>
                </div>

                <hr class="divider"/>
                <div class="row">
                    <div class="col-md-2">
                        <table>
                            <tr>
                                <th></th>
                                <th>Ano</th>
                            </tr>
                            <ui:repeat value="#{dashboardContaPorCategoriaControlador.exercicios}"
                                       var="exercicio">
                                <tr>
                                    <td>
                                        <a class="btn fa fa-asterisk" onclick="selecionarExercicio('${exercicio.id}');"
                                           id="${exercicio.id}"/>

                                    </td>
                                    <td>
                                        <h:outputText value="#{exercicio.ano}"/>

                                    </td>
                                </tr>
                            </ui:repeat>

                        </table>
                    </div>

                    <div class="col-md-3">
                        <table>
                            <tr>
                                <th></th>
                                <th>Secretarias</th>
                            </tr>
                            <ui:repeat value="#{dashboardContaPorCategoriaControlador.hierarquias}"
                                       var="hierarquia">
                                <tr>
                                    <td>
                                        <a class="btn fa fa-asterisk"
                                           onclick="selecionarSecretaria('${hierarquia.id}');"
                                           id="${hierarquia.id}"/>
                                    </td>
                                    <td>
                                        <h:outputText value="#{hierarquia.toString()}"/>
                                    </td>
                                </tr>
                            </ui:repeat>

                        </table>
                    </div>

                    <div class="col-md-2">
                        <table>
                            <tr>
                                <th></th>
                                <th>Categoria de Despesa</th>
                            </tr>
                            <ui:repeat value="#{dashboardContaPorCategoriaControlador.categoriaDespesa}"
                                       var="conta">
                                <tr>
                                    <td>
                                        <a class="btn fa fa-asterisk" onclick="selecionarConta('${conta.id}');"
                                           id="${conta.id}"/>

                                    </td>
                                    <td>
                                        <h:outputText value="#{conta.descricao}"/>

                                    </td>
                                </tr>
                            </ui:repeat>

                        </table>
                    </div>

                    <div class="col-md-2">
                        <p:outputPanel id="naturezaDespesa">
                            <table>
                                <tr>
                                    <th></th>
                                    <th>Natureza da Despesa</th>
                                </tr>
                                <ui:repeat value="#{dashboardContaPorCategoriaControlador.contasDeNatureza}"
                                           var="natureza">
                                    <tr>
                                        <td>
                                            <a class="btn fa fa-asterisk"
                                               onclick="selecionarNatureza('${natureza.id}');"
                                               id="${natureza.id}"/>

                                        </td>
                                        <td>
                                            <h:outputText value="#{natureza.descricao}"/>

                                        </td>
                                    </tr>
                                </ui:repeat>

                            </table>
                        </p:outputPanel>
                    </div>

                    <div class="col-md-2">
                        <p:outputPanel id="elementoDespesa">
                            <table>
                                <tr>
                                    <th></th>
                                    <th>Elemento de Despesa</th>
                                </tr>
                                <ui:repeat value="#{dashboardContaPorCategoriaControlador.contasDeElemento}"
                                           var="elemento">
                                    <tr>
                                        <td>
                                            <a class="btn fa fa-asterisk"
                                               onclick="selecionarElemento('${elemento.id}');"
                                               id="${elemento.id}"/>

                                        </td>
                                        <td>
                                            <h:outputText value="#{elemento.descricao}"/>

                                        </td>
                                    </tr>
                                </ui:repeat>

                            </table>
                        </p:outputPanel>
                    </div>
                </div>


                <p:commandButton value="Buscar Informações"
                                 icon="ui-icon-search"
                                 styleClass="icone_azul"
                                 update="@none"
                                 process="@none"
                                 id="btnBuscar"
                                 style=" height: 32px;"
                                 onclick="pesquisar();"/>

                <p:commandButton value="Limpar"
                                 icon="ui-icon-clear"
                                 styleClass="icone_azul"
                                 update="@none"
                                 process="@none"
                                 id="btnLimpar"
                                 style=" height: 32px;"
                                 onclick="limpar();"/>

            </p:panel>

            <div class="col-md-12 text-raleway painelGraficos" style="background-color: #eaeaea!important;">
                <div class="col-md-12 centralizado mbot10">
                </div>
                <div class="col-md-4 painel-grafico grafico1">
                    <div class="ibox">
                        <div class="ibox-content">
                            <div class="row" style="height: 400px !important;">
                                <canvas id="chartDespesaReceitaCapitalGeral"></canvas>
                            </div>

                        </div>
                    </div>
                </div>
                <div class="col-md-4 painel-grafico grafico2">
                    <div class="ibox">
                        <div class="ibox-content">
                            <div class="row" style="height: 400px !important;">
                                <canvas id="chartDespesaPorCategoria"></canvas>
                            </div>

                        </div>
                    </div>
                </div>
            </div>

            <p:remoteCommand name="atribuirIdConta" process="@form" update="naturezaDespesa"
                             actionListener="#{dashboardContaPorCategoriaControlador.atribuirIdConta()}"/>
            <p:remoteCommand name="removerIdConta" process="@form" update="naturezaDespesa"
                             actionListener="#{dashboardContaPorCategoriaControlador.removerIdConta()}"/>


            <p:remoteCommand name="atribuirIdNatureza" process="@form" update="elementoDespesa"
                             actionListener="#{dashboardContaPorCategoriaControlador.atribuirIdNatureza()}"/>
            <p:remoteCommand name="removerIdNatureza" process="@form" update="elementoDespesa"
                             actionListener="#{dashboardContaPorCategoriaControlador.removerIdNatureza()}"/>

        </h:form>

        <script src="#{facesContext.externalContext.requestContextPath}/resources/js/chart_js/dist/Chart.js"></script>

        <script type="text/javascript">
            var chartDespesaPorCategoria = null;
            var tipoDash = "bar";
            var porcentagem = false;
            var arrayExercicios = [];
            var arraySecretarias = [];
            var arrayContas = [];
            var arrayNatureza = [];
            var arrayElementos = [];


            function selecionarConta(idConta) {
                if (arrayContas.includes(idConta)) {
                    arrayContas.splice(arrayContas.indexOf(idConta), 1);
                    var classes = document.getElementById(idConta).classList;
                    classes.remove("fa-check-circle-o");
                    classes.remove("verde");
                    classes.add("fa-asterisk");
                    removerIdConta([{name: 'conta', value: idConta}]);
                } else {
                    arrayContas.push(idConta);
                    var classes = document.getElementById(idConta).classList;
                    classes.remove("fa-asterisk");
                    classes.add("fa-check-circle-o");
                    classes.add("verde");
                    atribuirIdConta([{name: 'conta', value: idConta}]);
                }

            }

            function selecionarNatureza(idConta) {
                if (arrayNatureza.includes(idConta)) {
                    arrayNatureza.splice(arrayNatureza.indexOf(idConta), 1);
                    var classes = document.getElementById(idConta).classList;
                    classes.remove("fa-check-circle-o");
                    classes.remove("verde");
                    classes.add("fa-asterisk");
                    removerIdNatureza([{name: 'conta', value: idConta}]);
                } else {
                    arrayNatureza.push(idConta);
                    var classes = document.getElementById(idConta).classList;
                    classes.remove("fa-asterisk");
                    classes.add("fa-check-circle-o");
                    classes.add("verde");
                    atribuirIdNatureza([{name: 'conta', value: idConta}]);
                }

            }

            function selecionarElemento(idConta) {
                if (arrayElementos.includes(idConta)) {
                    arrayElementos.splice(arrayElementos.indexOf(idConta), 1);
                    var classes = document.getElementById(idConta).classList;
                    classes.remove("fa-check-circle-o");
                    classes.remove("verde");
                    classes.add("fa-asterisk");

                } else {
                    arrayElementos.push(idConta);
                    var classes = document.getElementById(idConta).classList;
                    classes.remove("fa-asterisk");
                    classes.add("fa-check-circle-o");
                    classes.add("verde");
                }

            }

            function selecionarExercicio(idExericio) {
                if (arrayExercicios.includes(idExericio)) {
                    arrayExercicios.splice(arrayExercicios.indexOf(idExericio), 1);
                    var classes = document.getElementById(idExericio).classList;
                    classes.remove("fa-check-circle-o");
                    classes.remove("verde");
                    classes.add("fa-asterisk");
                } else {
                    arrayExercicios.push(idExericio);
                    var classes = document.getElementById(idExericio).classList;
                    classes.remove("fa-asterisk");
                    classes.add("fa-check-circle-o");
                    classes.add("verde");
                }
            }

            function selecionarSecretaria(idHierarquia) {
                if (arraySecretarias.includes(idHierarquia)) {
                    arraySecretarias.splice(arraySecretarias.indexOf(idHierarquia), 1);
                    var classes = document.getElementById(idHierarquia).classList;
                    classes.remove("fa-check-circle-o");
                    classes.remove("verde");
                    classes.add("fa-asterisk");
                } else {
                    arraySecretarias.push(idHierarquia);
                    var classes = document.getElementById(idHierarquia).classList;
                    classes.remove("fa-asterisk");
                    classes.add("fa-check-circle-o");
                    classes.add("verde");
                }

            }

            window.onload = function () {
                pesquisaGeral();
                mudarPainelParaDoze();

            }

            function mudarPainelParaDoze() {
                $(".painel-grafico").removeClass("col-md-4")
                $(".painel-grafico").removeClass("col-md-6")
                $(".painel-grafico").addClass("col-md-12")
            }


            function atribuirDashBoard(valor) {
                this.tipoDash = valor;

                if (tipoDash == "bar") {
                    jQuery('#barra').addClass('active');
                    jQuery('#linha').removeClass('active');
                    jQuery('#pizza').removeClass('active');
                } else if (tipoDash == "line") {
                    jQuery('#barra').removeClass('active');
                    jQuery('#linha').addClass('active');
                    jQuery('#pizza').removeClass('active');
                } else {
                    jQuery('#barra').removeClass('active');
                    jQuery('#linha').removeClass('active');
                    jQuery('#pizza').addClass('active');
                }
            }

            function atribuirTipo(valor) {
                this.porcentagem = valor;

                if (porcentagem == true) {
                    jQuery('#procentagem').addClass('active');
                    jQuery('#quantidade').removeClass('active');
                } else {
                    jQuery('#procentagem').removeClass('active');
                    jQuery('#quantidade').addClass('active');
                }
            }

            function isNull(arg) {
                if (arg == null == 'null' || arg == null || arg == 'undefined' || arg == '' || arg.length == 0) {
                    return true;
                }
                return false;
            }

            function limpar() {
                try {
                    if (this.chartDespesaPorCategoria != null) {
                        this.chartDespesaPorCategoria.destroy();
                    }
                    if (arrayExercicios != null) {
                        arrayExercicios.destroy();
                    }
                    if (arraySecretarias != null) {
                        arraySecretarias.destroy();
                    }
                    if (arrayContas != null) {
                        arrayContas.destroy();
                    }
                    if (arrayNatureza != null) {
                        arrayNatureza.destroy();
                    }
                    if (arrayElementos != null) {
                        arrayElementos.destroy();
                    }


                } catch (exception_var_1) {
                    console.log(exception_var_1)
                }
                jQuery('#Formulario\\:btnBuscar').removeClass('ui-state-disabled');
                jQuery('#Formulario\\:btnLimpar').addClass('ui-state-disabled');
            }

            function pesquisar() {

                var validou = true;

                if (isNull(arrayExercicios)) {
                    alert('Favor selecionar ao menos um exercicio.');
                    validou = false;
                }

                if (isNull(arraySecretarias)) {
                    alert('Favor selecionar ao menos uma secretaria.');
                    validou = false;
                }

                if (isNull(arrayElementos)) {
                    alert('Favor selecionar ao menos um elemento De despesa.');
                    validou = false;
                }


                if (validou) {
                    jQuery('#Formulario\\:btnBuscar').addClass('ui-state-disabled');
                    jQuery('#Formulario\\:btnLimpar').removeClass('ui-state-disabled');
                    realizarBusca();
                }
            }

            function pesquisaGeral() {
                jQuery('#Formulario\\:btnLimpar').addClass('ui-state-disabled');
                realizarBuscaGeral();
            }

            function realizarBuscaGeral() {
                aguarde.show();
                var chartDespesaReceitaCapitalGeral = document.getElementById("chartDespesaReceitaCapitalGeral")
                if (chartDespesaReceitaCapitalGeral != null) {
                    chartDespesaReceitaCapitalGeral = chartDespesaReceitaCapitalGeral.getContext("2d")

                    $.ajax({
                        url: #{facesContext.externalContext.requestContextPath}'/spring/dashboard-contabil/despesa-capital-corrente',
                        type: 'POST',
                        data: '',
                        success: function (retorno) {
                            tratarRetornoDespesaReceitaCapitalGeral(chartDespesaReceitaCapitalGeral, JSON.parse(retorno));
                            aguarde.hide();
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            aguarde.hide();
                        }
                    });
                }
            }

            function tratarRetornoDespesaReceitaCapitalGeral(chartDespesaReceitaCapitalGeral, retorno) {
                this.chartDespesaReceitaCapitalGeral = new Chart(chartDespesaReceitaCapitalGeral, retorno);

                retorno.options.tooltips = {
                    callbacks: {
                        label: function (t, d) {
                            return formatarValorRSDashboard(t.yLabel);
                        }
                    }
                };

                retorno.options.scales = {
                    yAxes: [{
                        ticks: {
                            beginAtZero: true,
                            callback: function (value, index, values) {
                                return formatarValorRSDashboard(value);
                            }
                        }
                    }]
                };

                retorno.options.responsive = true;
                retorno.options.maintainAspectRatio = false;
                retorno.options.title = {
                    display: true,
                    text: "Gráfico Geral",
                    fontSize: 20
                };

            }


            function realizarBusca() {
                aguarde.show();

                var chartDespesaPorCategoria = document.getElementById("chartDespesaPorCategoria")
                if (chartDespesaPorCategoria != null) {
                    chartDespesaPorCategoria = chartDespesaPorCategoria.getContext("2d")

                    $.ajax({
                        url: #{facesContext.externalContext.requestContextPath}'/spring/dashboard-contabil/despesa-categoria?&amp;tipoDash=' + tipoDash
                            + '&amp;porcentagem=' + porcentagem + "&amp;arraySecretarias=" + arraySecretarias + "&amp;arrayExercicios=" + arrayExercicios
                            + "&amp;arrayContas=" + arrayElementos,
                        type: 'POST',
                        data: '',
                        success: function (retorno) {
                            tratarRetornoDespesaCategoria(chartDespesaPorCategoria, JSON.parse(retorno));
                            aguarde.hide();
                        },
                        error: function (XMLHttpRequest, textStatus, errorThrown) {
                            aguarde.hide();
                        }
                    });
                }
            }

            function tratarRetornoDespesaCategoria(chartDespesaPorCategoria, retorno) {
                this.chartDespesaPorCategoria = new Chart(chartDespesaPorCategoria, retorno);

                retorno.options.legend = {
                    display: true,
                    position: 'bottom'
                };

                retorno.options.responsive = true;
                retorno.options.maintainAspectRatio = false;
                if (tipoDash == "line") {
                    retorno.options.fill = false;
                    retorno.options.showLines = true;
                }
                retorno.options.title = {
                    display: true,
                    text: "Despesa Por Categoria",
                    fontSize: 20
                };

                if (tipoDash == "pie") {
                    retorno.options.tooltips = {
                        callbacks: {
                            label: function (t, d) {
                                if (porcentagem == true) {
                                    return formatarValorPorcentagemDashboard(retorno.data.datasets[t.datasetIndex].data[t.index]);
                                } else {
                                    return formatarValorRSDashboard(retorno.data.datasets[t.datasetIndex].data[t.index]);
                                }
                            }
                        }
                    };
                } else {
                    retorno.options.tooltips = {
                        callbacks: {
                            label: function (t, d) {
                                if (porcentagem == true) {
                                    return formatarValorPorcentagemDashboard(retorno.data.datasets[t.datasetIndex].data[t.index]);
                                } else {
                                    return formatarValorRSDashboard(retorno.data.datasets[t.datasetIndex].data[t.index]);
                                }
                            }
                        }
                    };

                    retorno.options.scales = {
                        yAxes: [{
                            ticks: {
                                beginAtZero: true,
                                callback: function (value, index, values) {
                                    if (porcentagem == true) {
                                        return formatarValorPorcentagemDashboard(value);
                                    } else {
                                        return formatarValorRSDashboard(value);
                                    }
                                }
                            }
                        }]
                    };
                }
            }

        </script>
    </ui:define>
</ui:composition>
</html>
