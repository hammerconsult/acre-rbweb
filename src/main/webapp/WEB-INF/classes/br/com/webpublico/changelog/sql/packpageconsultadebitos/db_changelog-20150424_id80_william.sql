create or replace
PACKAGE BODY PACOTE_CONSULTA_DE_DEBITOS
AS
FUNCTION GETULTIMASITUACAOPARCELA(
    PARAM_PARCELA_ID IN NUMBER)
  RETURN NUMBER
AS
  SITUACAO_ID             NUMBER;
BEGIN
select id
INTO SITUACAO_ID
from (
SELECT id
      FROM SITUACAOPARCELAVALORDIVIDA
      WHERE PARCELA_ID = PARAM_PARCELA_ID
      order by DATALANCAMENTO desc, id desc
      ) where rownum = 1;
RETURN SITUACAO_ID;
END GETULTIMASITUACAOPARCELA;
FUNCTION GETVALORJUROS(
    PARAM_DATA_OPERACAO IN DATE ,
    PARAM_ID_PARCELA    IN NUMBER,
    CALCULA_DESCONTO    IN NUMBER)
  RETURN NUMBER
AS
  TIPO_APLIC_ACRESCIMO_EXCEPTION EXCEPTION;
  CONFIGURACAO_ACRESCIMOS CONFIGURACAOACRESCIMOS%ROWTYPE;
  VALOR_JUROS              NUMBER;
  MULTIPLICADOR            NUMBER;
  DIFERENCA_DIAS           NUMBER;
  DIFERENCA_MESES          NUMBER;
  DIFERENCA_ANOS           NUMBER;
  QTDADE_DIAS_MES_ANTERIOR NUMBER;
  PARAM_SITUACAO           VARCHAR2(50);
  PARAM_TIPO_CALC          VARCHAR2(50);
  PARAM_DIVIDA_ID          NUMBER ;
  PARAM_VALOR              NUMBER ;
  PARAM_IS_DIVIDA_ATIVA    NUMBER;
  PARAM_DATA_VENCIMENTO    DATE ;
  PARAM_EXERCICIO          NUMBER;
  COTA_UNICA               NUMBER;
  PAGTO_PARCELAMENTO       NUMBER;
  JUROS_ORIGINAL     NUMBER;
BEGIN
  PARAM_VALOR :=0;
  EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT = "dd/MM/yyyy"';
  SELECT pvd.vencimento,
    vd.divida_id,
    COALESCE(pvd.dividaativa, 0),
    spvd.situacaoparcela,
    exercicio.ano,
    COALESCE(OP.PROMOCIONAL,0), CALCULO.TIPOCALCULO
  INTO PARAM_DATA_VENCIMENTO,
    PARAM_DIVIDA_ID,
    PARAM_IS_DIVIDA_ATIVA,
    PARAM_SITUACAO,
    PARAM_EXERCICIO,
    COTA_UNICA, PARAM_TIPO_CALC
  FROM parcelavalordivida pvd
  INNER JOIN OPCAOPAGAMENTO OP
  ON OP.ID = pvd.OPCAOPAGAMENTO_ID
  INNER JOIN valordivida vd
  ON vd.id = pvd.valordivida_id
  INNER JOIN CALCULO ON CALCULO.ID = VD.CALCULO_ID
  INNER JOIN exercicio
  ON exercicio.id = vd.exercicio_id
  INNER JOIN situacaoparcelavalordivida spvd
  ON spvd.parcela_id = pvd.id
  WHERE spvd.id      = getultimasituacao(pvd.id)
  AND pvd.id = PARAM_ID_PARCELA;
  IF COTA_UNICA = 1 AND PARAM_DATA_VENCIMENTO >= PARAM_DATA_OPERACAO THEN
     RETURN 0;
  END IF;
  IF PARAM_DATA_VENCIMENTO >= TO_DATE(PARAM_DATA_OPERACAO, 'dd/MM/yyyy') THEN
  VALOR_JUROS := GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA, 'JUROS');
  IF CALCULA_DESCONTO      = 1 THEN
    PAGTO_PARCELAMENTO    := COALESCE(PGTOPARCCANCPARCELAMENTO(PARAM_ID_PARCELA),0);
     IF PAGTO_PARCELAMENTO >= VALOR_JUROS THEN
       VALOR_JUROS         := 0;
     ELSE
      VALOR_JUROS := VALOR_JUROS - PAGTO_PARCELAMENTO;
    END IF;
  END IF;
  RETURN VALOR_JUROS;
  END IF;
  IF PARAM_SITUACAO = 'PAGO' OR PARAM_SITUACAO = 'BAIXADO' THEN
    SELECT SUM(IDM.JUROS)
    INTO VALOR_JUROS
    FROM DAM DM
    INNER JOIN ITEMDAM IDM
    ON IDM.DAM_ID        = DM.ID
    WHERE IDM.ID = (SELECT MAX(S_IDM.ID)
                     FROM ITEMDAM S_IDM
                    INNER JOIN DAM S_DAM ON S_DAM.ID = S_IDM.DAM_ID
                  WHERE S_DAM.SITUACAO = 'PAGO' AND S_IDM.PARCELA_ID = PARAM_ID_PARCELA);
    RETURN ROUND(VALOR_JUROS,2);
  END IF;
  IF PARAM_SITUACAO = 'PARCELADO' THEN
    SELECT SUM(IPP.JUROS)
    INTO VALOR_JUROS
    FROM itemprocessoparcelamento IPP
    INNER JOIN processoparcelamento pp
    ON pp.id                        = ipp.processoparcelamento_id
    WHERE IPP.PARCELAVALORDIVIDA_ID = PARAM_ID_PARCELA
    AND IPP.ID =( select max(id) from itemprocessoparcelamento where parcelavalordivida_id = PARAM_ID_PARCELA);
    RETURN ROUND(VALOR_JUROS,2);
  END IF;
  IF PARAM_SITUACAO = 'PAGO_PARCELAMENTO' THEN
    SELECT IPP.JUROS
    INTO VALOR_JUROS
    FROM itemprocessoparcelamento IPP
    WHERE IPP.ID =( select max(id) from itemprocessoparcelamento where parcelavalordivida_id = PARAM_ID_PARCELA);
    RETURN ROUND(VALOR_JUROS,2);
  END IF;

  IF PARAM_SITUACAO = 'PAGO_SUBVENCAO' THEN
    SELECT sub.JUROS
    INTO VALOR_JUROS
    FROM SUBVENCAOPARCELA SUB
    WHERE SUB.ID =( select min(id) from subvencaoparcela where parcelavalordivida_id = PARAM_ID_PARCELA);
    RETURN ROUND(VALOR_JUROS,2);
  END IF;

  IF PARAM_SITUACAO <> 'EM_ABERTO' THEN
    RETURN GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA, 'JUROS');
  END IF;
  SELECT CA.*
  INTO CONFIGURACAO_ACRESCIMOS
  FROM DIVIDAACRESCIMO DA
  INNER JOIN CONFIGURACAOACRESCIMOS CA
  ON CA.ID                       = DA.ACRESCIMO_ID
  WHERE DA.DIVIDA_ID             = PARAM_DIVIDA_ID
  AND DA.INICIOVIGENCIA         <= SYSDATE
  AND ( DA.FINALVIGENCIA        IS NULL
  OR DA.FINALVIGENCIA           >= SYSDATE );
  IF CONFIGURACAO_ACRESCIMOS.ID IS NULL THEN
    RETURN GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA, 'JUROS');
  END IF;
  IF CONTEMINCIDENCIA( 'IMPOSTO', 'JUROS', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_VALOR                                                       := PARAM_VALOR + GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA,
'IMPOSTO');
  END IF;
  IF CONTEMINCIDENCIA( 'TAXA', 'JUROS', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_VALOR                                                    := PARAM_VALOR + GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA,
'TAXA');
  END IF;
  IF CONTEMINCIDENCIA( 'CORRECAO', 'JUROS', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_VALOR                                                        := PARAM_VALOR + GETVALORCORRECAO(PARAM_ID_PARCELA,
EXTRACT(YEAR FROM PARAM_DATA_VENCIMENTO),0, SYSDATE);
  END IF;
  IF CONTEMINCIDENCIA( 'MULTA_ORIGINAL', 'JUROS', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_VALOR                                                              := PARAM_VALOR + GETVALORTIPOTRIBUTO
(PARAM_ID_PARCELA, 'MULTA');
  END IF;
  IF CONTEMINCIDENCIA( 'COREECAO_ORIGINAL', 'JUROS', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_VALOR                                                                 := PARAM_VALOR + GETVALORTIPOTRIBUTO
(PARAM_ID_PARCELA, 'CORRECAO');
  END IF;
  IF CONTEMINCIDENCIA( 'HONORARIOS_ORIGINAL', 'JUROS', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_VALOR                                                                   := PARAM_VALOR + GETVALORTIPOTRIBUTO
(PARAM_ID_PARCELA, 'HONORARIOS');
  END IF;
  IF CONTEMINCIDENCIA( 'JUROS_ORIGINAL', 'JUROS', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_VALOR                                                              := PARAM_VALOR + GETVALORTIPOTRIBUTO
(PARAM_ID_PARCELA, 'JUROS');
  END IF;
  DIFERENCA_DIAS    := TRUNC(PARAM_DATA_OPERACAO) - TRUNC(PARAM_DATA_VENCIMENTO);
  DIFERENCA_MESES   := DIFERENCA_DIAS             /30;
  IF DIFERENCA_MESES < 0 THEN
    DIFERENCA_MESES := DIFERENCA_MESES + 12;
  END IF;
  SELECT TO_NUMBER(TO_CHAR(LAST_DAY(PARAM_DATA_OPERACAO),'dd'))
  INTO QTDADE_DIAS_MES_ANTERIOR
  FROM DUAL;
  IF DIFERENCA_DIAS  < 0 THEN
    DIFERENCA_DIAS  := DIFERENCA_DIAS  + QTDADE_DIAS_MES_ANTERIOR;
    DIFERENCA_MESES := DIFERENCA_MESES - 1;
  END IF;
  IF CONFIGURACAO_ACRESCIMOS.JUROSFRACIONADO = 1 THEN
    MULTIPLICADOR                           := DIFERENCA_MESES + ( DIFERENCA_DIAS / QTDADE_DIAS_MES_ANTERIOR);
  ELSE
    IF DIFERENCA_DIAS              > 0 THEN
      IF ROUND(DIFERENCA_MESES, 0) < DIFERENCA_MESES THEN
        DIFERENCA_MESES           := DIFERENCA_MESES + 1;
      END IF;
      MULTIPLICADOR := ROUND(DIFERENCA_MESES, 0);
    END IF;
  END IF;
  MULTIPLICADOR           := MULTIPLICADOR / 100;
  IF PARAM_IS_DIVIDA_ATIVA = 1 THEN
    VALOR_JUROS           := (PARAM_VALOR * MULTIPLICADOR) * CONFIGURACAO_ACRESCIMOS.VALORJUROSDIVIDAATIVA;
  ELSE
    VALOR_JUROS := (PARAM_VALOR * MULTIPLICADOR) * CONFIGURACAO_ACRESCIMOS.VALORJUROSEXERCICIO;
  END IF;
  JUROS_ORIGINAL := GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA, 'JUROS');
  IF PARAM_TIPO_CALC <> 'NFSE' THEN
    VALOR_JUROS             := ROUND(VALOR_JUROS + JUROS_ORIGINAL,2);
  ELSE
     IF VALOR_JUROS < JUROS_ORIGINAL THEN
         VALOR_JUROS             := ROUND(JUROS_ORIGINAL,2);
         END IF;
  END IF;
  IF CALCULA_DESCONTO      = 1 THEN
    PAGTO_PARCELAMENTO    := COALESCE(PGTOPARCCANCPARCELAMENTO(PARAM_ID_PARCELA),0);
    IF PAGTO_PARCELAMENTO >= VALOR_JUROS THEN
      VALOR_JUROS         := 0;
    ELSE
      VALOR_JUROS := VALOR_JUROS - PAGTO_PARCELAMENTO;
    END IF;
  END IF;
  RETURN VALOR_JUROS;
EXCEPTION
WHEN NO_DATA_FOUND THEN
  RETURN 0;
WHEN TIPO_APLIC_ACRESCIMO_EXCEPTION THEN
  RAISE_APPLICATION_ERROR (-20000, 'TIPO DE APLICAÇÃO DE ACRÉSCIMO INVÁLIDO!');
END GETVALORJUROS;
FUNCTION GETVALORMULTA(
    PARAM_DATA_OPERACAO IN DATE ,
    PARAM_ID_PARCELA    IN NUMBER,
    CALCULA_DESCONTO    IN NUMBER)
  RETURN NUMBER
AS
  TIPO_APLIC_ACRESCIMO_EXCEPTION EXCEPTION;
  CONFIGURACAO_ACRESCIMOS CONFIGURACAOACRESCIMOS%ROWTYPE;
  ITEM_CONFIGURACAO_VALOR NUMBER;
  QTDADE_DIAS_ATRASO      NUMBER;
  PERCENTUAL_MULTA        NUMBER;
  VALOR_MULTA             NUMBER;
  PARAM_SITUACAO          VARCHAR2(50);
  PARAM_TIPO_CALC         VARCHAR2(50);
  PARAM_DIVIDA_ID         NUMBER ;
  PARAM_VALOR             NUMBER ;
  PARAM_IS_DIVIDA_ATIVA   NUMBER;
  PARAM_DATA_VENCIMENTO   DATE;
  PARAM_EXERCICIO         NUMBER;
  COTA_UNICA              NUMBER;
  JUROS                   NUMBER;
  PAGTO_PARCELAMENTO      NUMBER;
  MULTA_ORIGINAL          NUMBER;
BEGIN
  EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT = "dd/MM/yyyy"';
  PARAM_VALOR        := 0;
  PERCENTUAL_MULTA   := 0;
  QTDADE_DIAS_ATRASO := 0;
  SELECT pvd.vencimento,
    vd.divida_id,
    COALESCE(pvd.dividaativa, 0),
    spvd.situacaoparcela,
    exercicio.ano,
    COALESCE(OP.PROMOCIONAL, 0), CALCULO.TIPOCALCULO
  INTO PARAM_DATA_VENCIMENTO,
    PARAM_DIVIDA_ID,
    PARAM_IS_DIVIDA_ATIVA,
    PARAM_SITUACAO,
    PARAM_EXERCICIO,
    COTA_UNICA, PARAM_TIPO_CALC
  FROM parcelavalordivida pvd
  INNER JOIN opcaopagamento op
  ON op.id = pvd.opcaopagamento_id
  INNER JOIN valordivida vd
  ON vd.id = pvd.valordivida_id
  INNER JOIN CALCULO ON CALCULO.ID = VD.CALCULO_ID
  INNER JOIN exercicio
  ON exercicio.id = vd.exercicio_id
  INNER JOIN situacaoparcelavalordivida spvd
  ON spvd.parcela_id = pvd.id
  WHERE spvd.id      = getultimasituacao(pvd.id)
  AND PVD.ID    = PARAM_ID_PARCELA;
  IF COTA_UNICA = 1 AND PARAM_DATA_VENCIMENTO >= PARAM_DATA_OPERACAO THEN
    RETURN 0;
  END IF;
  IF PARAM_DATA_VENCIMENTO >=  TO_DATE(PARAM_DATA_OPERACAO, 'dd/MM/yyyy') THEN
  VALOR_MULTA := GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA, 'MULTA');
  IF CALCULA_DESCONTO        = 1 THEN
    PAGTO_PARCELAMENTO      := PGTOPARCCANCPARCELAMENTO(PARAM_ID_PARCELA);
    JUROS                   := GETVALORJUROS( PARAM_DATA_OPERACAO, PARAM_ID_PARCELA, 0);
    IF PAGTO_PARCELAMENTO   >= JUROS THEN
      PAGTO_PARCELAMENTO    := PAGTO_PARCELAMENTO - JUROS;
      IF PAGTO_PARCELAMENTO >= VALOR_MULTA THEN
        VALOR_MULTA         := 0;
      ELSE
        VALOR_MULTA := VALOR_MULTA - PAGTO_PARCELAMENTO;
      END IF;
    END IF;
  END IF;
  RETURN  VALOR_MULTA;
  END IF;
  IF PARAM_SITUACAO = 'PAGO' OR PARAM_SITUACAO = 'BAIXADO' THEN
    SELECT SUM(IDM.MULTA)
    INTO VALOR_MULTA
    FROM DAM DM
    INNER JOIN ITEMDAM IDM
    ON IDM.DAM_ID        = DM.ID
    WHERE IDM.ID = (SELECT MAX(S_IDM.ID)
                     FROM ITEMDAM S_IDM
                    INNER JOIN DAM S_DAM ON S_DAM.ID = S_IDM.DAM_ID
                  WHERE S_DAM.SITUACAO = 'PAGO' AND S_IDM.PARCELA_ID = PARAM_ID_PARCELA);
    RETURN ROUND(VALOR_MULTA,2);
  END IF;
    IF PARAM_SITUACAO = 'PAGO_PARCELAMENTO' THEN
    SELECT IPP.MULTA
    INTO VALOR_MULTA
    FROM itemprocessoparcelamento IPP
    WHERE IPP.ID =( select max(id) from itemprocessoparcelamento where parcelavalordivida_id = PARAM_ID_PARCELA);
    RETURN ROUND(VALOR_MULTA,2);
  END IF;
  IF PARAM_SITUACAO = 'PARCELADO' THEN
    SELECT SUM(IPP.MULTA)
    INTO VALOR_MULTA
    FROM itemprocessoparcelamento IPP
    INNER JOIN processoparcelamento pp
    ON pp.id                        = ipp.processoparcelamento_id
    WHERE IPP.PARCELAVALORDIVIDA_ID = PARAM_ID_PARCELA
    AND IPP.ID =( select max(id) from itemprocessoparcelamento where parcelavalordivida_id = PARAM_ID_PARCELA);
    RETURN ROUND(VALOR_MULTA,2);
  END IF;

   IF PARAM_SITUACAO = 'PAGO_SUBVENCAO' THEN
    SELECT sub.multa
    INTO VALOR_MULTA
    FROM SUBVENCAOPARCELA SUB
    WHERE SUB.ID =( select min(id) from subvencaoparcela where parcelavalordivida_id = PARAM_ID_PARCELA);
    RETURN ROUND(VALOR_MULTA,2);
  END IF;

  IF PARAM_SITUACAO <> 'EM_ABERTO' THEN
    RETURN GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA, 'MULTA');
  END IF;
  SELECT CA.*
  INTO CONFIGURACAO_ACRESCIMOS
  FROM DIVIDAACRESCIMO DA
  INNER JOIN CONFIGURACAOACRESCIMOS CA
  ON CA.ID                       = DA.ACRESCIMO_ID
  WHERE DA.DIVIDA_ID             = PARAM_DIVIDA_ID
  AND DA.INICIOVIGENCIA         <= SYSDATE
  AND ( DA.FINALVIGENCIA        IS NULL
  OR DA.FINALVIGENCIA           >= SYSDATE );
  IF CONFIGURACAO_ACRESCIMOS.ID IS NULL THEN
    RETURN 0;
  END IF;
  IF CONTEMINCIDENCIA( 'IMPOSTO', 'MULTA', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_VALOR                                                       := PARAM_VALOR + GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA,
'IMPOSTO');
  END IF;
  IF CONTEMINCIDENCIA( 'TAXA', 'MULTA', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_VALOR                                                    := PARAM_VALOR + GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA,
'TAXA');
  END IF;
  IF CONTEMINCIDENCIA( 'CORRECAO', 'MULTA', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_VALOR                                                        := PARAM_VALOR + GETVALORCORRECAO(PARAM_ID_PARCELA,
EXTRACT(YEAR FROM PARAM_DATA_VENCIMENTO),0, SYSDATE);
  END IF;
  IF CONTEMINCIDENCIA( 'MULTA_ORIGINAL', 'MULTA', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_VALOR                                                              := PARAM_VALOR + GETVALORTIPOTRIBUTO
(PARAM_ID_PARCELA, 'MULTA');
  END IF;
  IF CONTEMINCIDENCIA( 'COREECAO_ORIGINAL', 'MULTA', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_VALOR                                                                 := PARAM_VALOR + GETVALORTIPOTRIBUTO
(PARAM_ID_PARCELA, 'CORRECAO');
  END IF;
  IF CONTEMINCIDENCIA( 'HONORARIOS_ORIGINAL', 'MULTA', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_VALOR                                                                   := PARAM_VALOR + GETVALORTIPOTRIBUTO
(PARAM_ID_PARCELA, 'HONORARIOS');
  END IF;
  IF CONTEMINCIDENCIA( 'JUROS_ORIGINAL', 'MULTA', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_VALOR                                                              := PARAM_VALOR + GETVALORTIPOTRIBUTO
(PARAM_ID_PARCELA, 'JUROS');
  END IF;
  QTDADE_DIAS_ATRASO      := ROUND(PARAM_DATA_OPERACAO - PARAM_DATA_VENCIMENTO);
  IF PARAM_IS_DIVIDA_ATIVA = 0 THEN
    SELECT VALOR
    INTO ITEM_CONFIGURACAO_VALOR
    FROM ITEMCONFIGURACAOACRESCIMOS
    WHERE QNTDIAS                >= QTDADE_DIAS_ATRASO
    AND CONFIGURACAOACRESCIMOS_ID = CONFIGURACAO_ACRESCIMOS.ID
    AND ROWNUM                    = 1
    ORDER BY QNTDIAS;
    IF ITEM_CONFIGURACAO_VALOR IS NOT NULL THEN
      PERCENTUAL_MULTA         := ITEM_CONFIGURACAO_VALOR / 100;
    END IF;
  ELSE
    PERCENTUAL_MULTA := CONFIGURACAO_ACRESCIMOS.VALORDIVIDAATIVAMULTA / 100;
  END IF;
  VALOR_MULTA               := PARAM_VALOR       * PERCENTUAL_MULTA;
  MULTA_ORIGINAL :=GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA, 'MULTA');
  IF PARAM_TIPO_CALC <> 'NFSE' THEN
  VALOR_MULTA               := ROUND(VALOR_MULTA + MULTA_ORIGINAL,2);
  ELSE
    IF MULTA_ORIGINAL > VALOR_MULTA THEN
      VALOR_MULTA := MULTA_ORIGINAL;
      END IF;
  END IF;
  IF CALCULA_DESCONTO        = 1 THEN
    PAGTO_PARCELAMENTO      := PGTOPARCCANCPARCELAMENTO(PARAM_ID_PARCELA);
    JUROS                   := GETVALORJUROS( PARAM_DATA_OPERACAO, PARAM_ID_PARCELA, 0);
    IF PAGTO_PARCELAMENTO   >= JUROS THEN
      PAGTO_PARCELAMENTO    := PAGTO_PARCELAMENTO - JUROS;
      IF PAGTO_PARCELAMENTO >= VALOR_MULTA THEN
        VALOR_MULTA         := 0;
      ELSE
        VALOR_MULTA := VALOR_MULTA - PAGTO_PARCELAMENTO;
      END IF;
    END IF;
  END IF;
  RETURN VALOR_MULTA;
EXCEPTION
WHEN NO_DATA_FOUND THEN
  RETURN 0;
WHEN TIPO_APLIC_ACRESCIMO_EXCEPTION THEN
  RAISE_APPLICATION_ERROR (-20000, 'TIPO DE APLICAÇÃO DE ACRÉSCIMO INVÁLIDO!');
END GETVALORMULTA;
FUNCTION GETVALORCORRECAO(
    PARAM_ID_PARCELA    IN NUMBER,
    PARAM_EXERCICIO_ANO IN NUMBER,
    CALCULA_DESCONTO    IN NUMBER,
    PARAM_DATA_ATUAL    IN DATE)
  RETURN NUMBER
IS
  VALORCORRIGIDO  NUMBER;
  PARAM_DIVIDA_ID NUMBER ;
  PARAM_SALDO     NUMBER;
  PARAM_DATA_REGISTRO_PARCELA DATE;
  PARAM_SITUACAO VARCHAR2(50);
  PARAM_VENCIMENTO DATE;
  COTA_UNICA         NUMBER;
  JUROS              NUMBER;
  MULTA              NUMBER;
  PAGTO_PARCELAMENTO NUMBER;
  CONFIGURACAO_ACRESCIMOS CONFIGURACAOACRESCIMOS%ROWTYPE;
BEGIN
  EXECUTE IMMEDIATE 'ALTER SESSION SET NLS_DATE_FORMAT = "dd/MM/yyyy"';
  PARAM_SALDO := 0;
  SELECT pvd.dataregistro,
    spvd.situacaoparcela,
    divida.id,
    pvd.vencimento,
    COALESCE(op.promocional, 0)
  INTO PARAM_DATA_REGISTRO_PARCELA,
    PARAM_SITUACAO,
    PARAM_DIVIDA_ID,
    PARAM_VENCIMENTO,
    COTA_UNICA
  FROM parcelavalordivida pvd
  INNER JOIN opcaopagamento op
  ON op.id = pvd.OPCAOPAGAMENTO_ID
  INNER JOIN valordivida vd
  ON vd.id = pvd.valordivida_id
  INNER JOIN exercicio
  ON exercicio.id = vd.EXERCICIO_ID
  INNER JOIN DIVIDA
  ON DIVIDA.ID = VD.DIVIDA_ID
  INNER JOIN situacaoparcelavalordivida spvd
  ON spvd.parcela_id = pvd.id
  WHERE spvd.id      = getultimasituacao(pvd.id)
  AND pvd.id    = PARAM_ID_PARCELA;
  IF COTA_UNICA = 1 AND SYSDATE < PARAM_VENCIMENTO THEN
      RETURN 0;
  END IF;
  IF PARAM_DATA_ATUAL <= PARAM_VENCIMENTO THEN
  VALORCORRIGIDO := GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA, 'CORRECAO');
    IF CALCULA_DESCONTO        = 1 THEN
    VALORCORRIGIDO := GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA, 'CORRECAO');
    PAGTO_PARCELAMENTO      := PGTOPARCCANCPARCELAMENTO(PARAM_ID_PARCELA);
    JUROS                   := GETVALORJUROS( PARAM_DATA_ATUAL, PARAM_ID_PARCELA, 0);
    MULTA                   := GETVALORMULTA( PARAM_DATA_ATUAL, PARAM_ID_PARCELA, 0);
      IF PAGTO_PARCELAMENTO   >= (JUROS             + MULTA) THEN
       PAGTO_PARCELAMENTO    := PAGTO_PARCELAMENTO - (JUROS + MULTA);
        IF PAGTO_PARCELAMENTO >= VALORCORRIGIDO THEN
         VALORCORRIGIDO      := 0;
          ELSE
           VALORCORRIGIDO := VALORCORRIGIDO - PAGTO_PARCELAMENTO;
        END IF;
       END IF;
    END IF;
  RETURN VALORCORRIGIDO;
END IF;

  --  RETURN GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA, 'CORRECAO');

  IF PARAM_SITUACAO = 'PAGO' THEN
    SELECT COALESCE(SUM(itemdam.correcaomonetaria),0)
    INTO VALORCORRIGIDO
    FROM ITEMLOTEBAIXAPARCELA it
    INNER JOIN ITEMLOTEBAIXA
    ON itemlotebaixa.id = it.ITEMLOTEBAIXA_ID
    INNER JOIN LOTEBAIXA
    ON lotebaixa.id = ITEMLOTEBAIXA.LOTEBAIXA_ID
    INNER JOIN itemdam
    ON itemdam.id = it.ITEMDAM_ID
    INNER JOIN parcelavalordivida pvd
    ON pvd.id                          = itemdam.PARCELA_ID
    WHERE (LOTEBAIXA.SITUACAOLOTEBAIXA = 'BAIXADO'
    OR LOTEBAIXA.SITUACAOLOTEBAIXA     = 'BAIXADO_INCONSITENTE')
    AND PVD.ID                         = PARAM_ID_PARCELA;
    RETURN ROUND(VALORCORRIGIDO,2);
  END IF;
   IF PARAM_SITUACAO = 'PAGO_PARCELAMENTO' THEN
    SELECT ipp.correcao
    INTO VALORCORRIGIDO
    FROM itemprocessoparcelamento IPP
    WHERE IPP.ID =( select max(id) from itemprocessoparcelamento where parcelavalordivida_id = PARAM_ID_PARCELA);
    RETURN ROUND(VALORCORRIGIDO,2);
  END IF;
  IF PARAM_SITUACAO = 'PARCELADO' THEN
    SELECT SUM(IPP.CORRECAO)
    INTO VALORCORRIGIDO
    FROM itemprocessoparcelamento IPP
    INNER JOIN processoparcelamento pp
    ON pp.id                        = ipp.processoparcelamento_id
    WHERE IPP.PARCELAVALORDIVIDA_ID = PARAM_ID_PARCELA
    AND IPP.ID =( select max(id) from itemprocessoparcelamento where parcelavalordivida_id = PARAM_ID_PARCELA);
    RETURN ROUND(VALORCORRIGIDO,2);
  END IF;

  IF PARAM_SITUACAO = 'PAGO_SUBVENCAO' THEN
    SELECT sub.correcao
    INTO VALORCORRIGIDO
    FROM SUBVENCAOPARCELA SUB
    WHERE SUB.ID =( select min(id) from subvencaoparcela where parcelavalordivida_id = PARAM_ID_PARCELA);
    RETURN ROUND(VALORCORRIGIDO,2);
  END IF;

  IF PARAM_SITUACAO <> 'EM_ABERTO' THEN
     RETURN GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA, 'CORRECAO');
  END IF;
  SELECT CA.*
  INTO CONFIGURACAO_ACRESCIMOS
  FROM DIVIDAACRESCIMO DA
  INNER JOIN CONFIGURACAOACRESCIMOS CA
  ON CA.ID                      = DA.ACRESCIMO_ID
  WHERE DA.DIVIDA_ID            = PARAM_DIVIDA_ID
  AND DA.INICIOVIGENCIA        <= SYSDATE
  AND ( DA.FINALVIGENCIA       IS NULL
  OR DA.FINALVIGENCIA          >= SYSDATE );
  IF CONFIGURACAO_ACRESCIMOS.ID = NULL THEN
    RETURN 0;
  END IF;
  IF CONFIGURACAO_ACRESCIMOS.CALCULACORRECAO <> 1 THEN
    RETURN 0;
  END IF;
  IF CONTEMINCIDENCIA( 'IMPOSTO', 'CORRECAO', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_SALDO                                                          := PARAM_SALDO + GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA,
'IMPOSTO');
  END IF;
  IF CONTEMINCIDENCIA( 'TAXA', 'CORRECAO', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
     PARAM_SALDO                                                       := PARAM_SALDO + GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA,
'TAXA');
  END IF;
  IF CONTEMINCIDENCIA( 'MULTA_ORIGINAL', 'CORRECAO', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_SALDO                                                                 := PARAM_SALDO + GETVALORTIPOTRIBUTO
(PARAM_ID_PARCELA, 'MULTA');
  END IF;
  IF CONTEMINCIDENCIA( 'COREECAO_ORIGINAL', 'CORRECAO', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_SALDO                                                                    := PARAM_SALDO + GETVALORTIPOTRIBUTO
(PARAM_ID_PARCELA, 'CORRECAO');
  END IF;
  IF CONTEMINCIDENCIA( 'HONORARIOS_ORIGINAL', 'CORRECAO', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_SALDO                                                                      := PARAM_SALDO + GETVALORTIPOTRIBUTO
(PARAM_ID_PARCELA, 'HONORARIOS');
  END IF;
  IF CONTEMINCIDENCIA( 'JUROS_ORIGINAL', 'CORRECAO', CONFIGURACAO_ACRESCIMOS.ID) = 1 THEN
    PARAM_SALDO                                                                 := PARAM_SALDO + GETVALORTIPOTRIBUTO
(PARAM_ID_PARCELA, 'JUROS');
  END IF;
  SELECT
    CASE
      WHEN PARAM_SALDO > 0
      THEN COALESCE((PARAM_SALDO/COALESCE(
        (SELECT MOEDADATAPARCELA.VALOR
        FROM MOEDA MOEDADATAPARCELA
        INNER JOIN INDICEECONOMICO INDICEDATAPARCELA
        ON INDICEDATAPARCELA.ID         = MOEDADATAPARCELA.INDICEECONOMICO_ID
        WHERE MOEDADATAPARCELA.MES      = TO_NUMBER(TO_CHAR(PARAM_DATA_REGISTRO_PARCELA,'MM'))
        AND MOEDADATAPARCELA.ANO        = PARAM_EXERCICIO_ANO
        AND INDICEDATAPARCELA.DESCRICAO = 'UFM'
        ) , 1)) * COALESCE(
        (SELECT MOEDAATUAL.VALOR
        FROM MOEDA MOEDAATUAL
        INNER JOIN INDICEECONOMICO INDICEATUAL
        ON INDICEATUAL.ID         = MOEDAATUAL.INDICEECONOMICO_ID
        WHERE MOEDAATUAL.MES      = TO_NUMBER(TO_CHAR(SYSDATE,'MM'))
        AND MOEDAATUAL.ANO        = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))
        AND INDICEATUAL.DESCRICAO = 'UFM'
        ) , 1), 0)
      ELSE 0
    END
  INTO VALORCORRIGIDO
  FROM DUAL;
  VALORCORRIGIDO            := ROUND((VALORCORRIGIDO - PARAM_SALDO) + GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA, 'CORRECAO'),2);
  IF CALCULA_DESCONTO        = 1 THEN
    PAGTO_PARCELAMENTO      := PGTOPARCCANCPARCELAMENTO(PARAM_ID_PARCELA);
    JUROS                   := GETVALORJUROS( SYSDATE, PARAM_ID_PARCELA, 0);
    MULTA                   := GETVALORMULTA( SYSDATE, PARAM_ID_PARCELA, 0);
    IF PAGTO_PARCELAMENTO   >= (JUROS             + MULTA) THEN
      PAGTO_PARCELAMENTO    := PAGTO_PARCELAMENTO - (JUROS + MULTA);
      IF PAGTO_PARCELAMENTO >= VALORCORRIGIDO THEN
        VALORCORRIGIDO      := 0;
      ELSE
        VALORCORRIGIDO := VALORCORRIGIDO - PAGTO_PARCELAMENTO;
      END IF;
    END IF;
  END IF;
  RETURN VALORCORRIGIDO;
END GETVALORCORRECAO;
FUNCTION GETVALORDESCONTO(
    PARAM_PARCELA_ID IN NUMBER )
  RETURN NUMBER
AS
  DESCONTO_PERCENTUAL NUMBER;
  DESCONTO_VALOR      NUMBER;
  SITUACAO_PARCELA    varchar2(75);
BEGIN

  SELECT SPVD.situacaoparcela
  INTO SITUACAO_PARCELA
  FROM SITUACAOPARCELAVALORDIVIDA SPVD
  WHERE SPVD.id = getultimasituacao(PARAM_PARCELA_ID);

   IF SITUACAO_PARCELA = 'PAGO_PARCELAMENTO' or SITUACAO_PARCELA = 'PARCELADO' THEN
     SELECT SUM(PGTO.valor)
    INTO DESCONTO_VALOR
    FROM MOVIMENTOVALORPARCELAMENTO PGTO
    WHERE pgto.parcela_id = PARAM_PARCELA_ID
    and pgto.parcelamento_id = (select max(parcelamento_id) from MOVIMENTOVALORPARCELAMENTO where parcela_id = PARAM_PARCELA_ID)
    and pgto.tipo = 'DESCONTO';
    RETURN DESCONTO_VALOR;
  END IF;
    IF SITUACAO_PARCELA = 'PAGO' OR SITUACAO_PARCELA = 'BAIXADO' THEN
    SELECT SUM(IDM.DESCONTO)
    INTO DESCONTO_VALOR
    FROM DAM DM
    INNER JOIN ITEMDAM IDM
    ON IDM.DAM_ID        = DM.ID
    WHERE IDM.ID = (SELECT MAX(S_IDM.ID)
                     FROM ITEMDAM S_IDM
                    INNER JOIN DAM S_DAM ON S_DAM.ID = S_IDM.DAM_ID
                  WHERE S_DAM.SITUACAO = 'PAGO' AND S_IDM.PARCELA_ID = PARAM_PARCELA_ID);
    RETURN ROUND(DESCONTO_VALOR,2);
  END IF;
  SELECT COALESCE(SUM(item.valor * (desconto.desconto/100)),0)
  INTO DESCONTO_PERCENTUAL
  FROM descontoitemparcela desconto
  INNER JOIN itemparcelavalordivida item
  ON item.id                           = desconto.itemparcelavalordivida_id
  WHERE item.parcelavalordivida_id     = PARAM_PARCELA_ID
  AND desconto.desconto                > 0
  AND desconto.tipo                    = 'PERCENTUAL'
  AND desconto.inicio                 <= sysdate
  AND COALESCE(desconto.fim, sysdate) >= sysdate;
  SELECT COALESCE(SUM(desconto.desconto),0)
  INTO DESCONTO_VALOR
  FROM descontoitemparcela desconto
  INNER JOIN itemparcelavalordivida item
  ON item.id                           = desconto.itemparcelavalordivida_id
  WHERE item.parcelavalordivida_id     = PARAM_PARCELA_ID
  AND desconto.tipo                    = 'VALOR'
  AND desconto.desconto                > 0
  AND desconto.inicio                 <= sysdate
  AND COALESCE(desconto.fim, sysdate) >= sysdate;
  RETURN ROUND(DESCONTO_PERCENTUAL + DESCONTO_VALOR,2);
END GETVALORDESCONTO;
FUNCTION GETVALORTIPOTRIBUTO(
    PARAM_PARCELA_ID   IN NUMBER,
    PARAM_TIPO_TRIBUTO IN VARCHAR2)
  RETURN NUMBER
AS
  VALOR_ORIGINAL NUMBER;
  VALOR_SALDO    NUMBER;
  VALOR_SOMA     NUMBER;
BEGIN
  SELECT COALESCE(pvd.valor,0) as parcelaValor,
    COALESCE(spvd.saldo,0) as itemSaldo,
    COALESCE(SUM(i.valor),0) as itemValor
  INTO VALOR_ORIGINAL,
    VALOR_SALDO,
    VALOR_SOMA
  FROM itemparcelavalordivida i
  INNER JOIN PARCELAVALORDIVIDA PVD
  ON i.PARCELAVALORDIVIDA_ID = PVD.ID
  INNER JOIN itemvalordivida iv
  ON iv.id = i.itemvalordivida_id
  INNER JOIN tributo t
  ON t.id = iv.tributo_id
  INNER JOIN situacaoparcelavalordivida spvd
  ON spvd.parcela_id = pvd.id
  WHERE spvd.id      = getultimasituacao(pvd.id)
  AND PVD.ID        = PARAM_PARCELA_ID
  AND t.tipotributo = PARAM_TIPO_TRIBUTO
  GROUP BY pvd.valor,
    spvd.saldo;
  IF VALOR_SALDO <= 0 THEN
    VALOR_SALDO  := VALOR_ORIGINAL;
  END IF;
  RETURN ROUND(VALOR_SALDO * ((VALOR_SOMA *100)/VALOR_ORIGINAL) / 100,2);
EXCEPTION
WHEN NO_DATA_FOUND THEN
  RETURN 0;
WHEN ZERO_DIVIDE THEN
  RETURN 0;
END GETVALORTIPOTRIBUTO;
FUNCTION GETNUMEROPARCELA(
    PARAM_ID_VALOR_DIVIDA    IN NUMBER ,
    PARAM_ID_OPCAO_PAGAMENTO IN NUMBER ,
    PARAM_PROMOCIONAL        IN NUMBER ,
    PARAM_SEQUENCIA_PARCELA  IN VARCHAR2 )
  RETURN VARCHAR2
AS
  NUMERO_PARCELA VARCHAR2(30);
BEGIN
  SELECT
    CASE
      WHEN PARAM_PROMOCIONAL = 1
      THEN (COALESCE(PARAM_SEQUENCIA_PARCELA,'')
        || '/1 UN')
      ELSE (COALESCE(PARAM_SEQUENCIA_PARCELA,'')
        ||'/'
        || TO_CHAR(
        (SELECT COUNT(p.id)
        FROM ParcelaValorDivida p
        INNER JOIN valordivida v
        ON v.id                 = p.valordivida_id
        WHERE v.id              = PARAM_ID_VALOR_DIVIDA
        AND p.opcaoPagamento_id = PARAM_ID_OPCAO_PAGAMENTO
        ) ))
    END
  INTO NUMERO_PARCELA
  FROM DUAL;
  RETURN NUMERO_PARCELA;
END GETNUMEROPARCELA;
FUNCTION GETVALORHONORARIOS(
    PARAM_ID_PARCELA IN NUMBER )
  RETURN NUMBER
AS
  TIPO_APLIC_ACRESCIMO_EXCEPTION EXCEPTION;
  CONFIGURACAO_ACRESCIMOS CONFIGURACAOACRESCIMOS%ROWTYPE;
  VALOR_HONORARIO          NUMBER;
  PORCENTAGEM_APLICAR      NUMBER;
  PARAM_VALOR              NUMBER;
  PARAM_DIVIDA_ID          NUMBER;
  PARAM_IS_DIVIDA_AJUIZADA NUMBER;
  PARAM_SITUACAO           VARCHAR2(50);
  PARAM_PARCELA_ID         NUMBER;
  PARAM_SITUACAO_ID         NUMBER;
  VALOR_EMBUTIDO         NUMBER;
  PARAM_PARCELA_VENCIMENTO DATE;
BEGIN
PARAM_SITUACAO_ID := GETULTIMASITUACAOPARCELA(PARAM_ID_PARCELA);
  SELECT COALESCE(pvd.dividaativaajuizada,0),
    vd.divida_id,
    pvd.id,
    spvd.situacaoparcela,
    pvd.vencimento
  INTO PARAM_IS_DIVIDA_AJUIZADA,
    PARAM_DIVIDA_ID,
    PARAM_PARCELA_ID,
    PARAM_SITUACAO,
    PARAM_PARCELA_VENCIMENTO
  FROM parcelavalordivida pvd
  INNER JOIN valordivida vd
  ON vd.id = pvd.valordivida_id
  INNER JOIN situacaoparcelavalordivida spvd
  ON spvd.ID = PARAM_SITUACAO_ID
  WHERE PVD.ID        = PARAM_ID_PARCELA;
  IF PARAM_SITUACAO = 'PAGO' THEN
    SELECT COALESCE(SUM(itemdam.honorarios),0)
    INTO VALOR_HONORARIO
    FROM ITEMLOTEBAIXAPARCELA it
    INNER JOIN ITEMLOTEBAIXA
    ON itemlotebaixa.id = it.ITEMLOTEBAIXA_ID
    INNER JOIN LOTEBAIXA
    ON lotebaixa.id = ITEMLOTEBAIXA.LOTEBAIXA_ID
    INNER JOIN itemdam
    ON itemdam.id = it.ITEMDAM_ID
    INNER JOIN parcelavalordivida pvd
    ON pvd.id                          = itemdam.PARCELA_ID
    WHERE (LOTEBAIXA.SITUACAOLOTEBAIXA = 'BAIXADO'
    OR LOTEBAIXA.SITUACAOLOTEBAIXA     = 'BAIXADO_INCONSITENTE')
    AND PVD.ID                         = PARAM_ID_PARCELA;
    RETURN ROUND(VALOR_HONORARIO,2);
      END IF;

  IF PARAM_SITUACAO = 'PAGO_SUBVENCAO' THEN
    SELECT sub.valorhonorarios
    INTO VALOR_HONORARIO
    FROM SUBVENCAOPARCELA SUB
    WHERE SUB.ID =( select min(id) from subvencaoparcela where parcelavalordivida_id = PARAM_ID_PARCELA);
    RETURN ROUND(VALOR_HONORARIO,2);
    END IF;
  IF PARAM_SITUACAO <> 'EM_ABERTO' AND PARAM_SITUACAO <> 'PAGO_PARCELAMENTO' AND PARAM_SITUACAO <> 'PARCELADO' THEN
        RETURN GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA, 'HONORARIOS');

  END IF;
  SELECT CA.*
  INTO CONFIGURACAO_ACRESCIMOS
  FROM DIVIDAACRESCIMO DA
  INNER JOIN CONFIGURACAOACRESCIMOS CA
  ON CA.ID                      = DA.ACRESCIMO_ID
  WHERE DA.DIVIDA_ID            = PARAM_DIVIDA_ID
  AND DA.INICIOVIGENCIA        <= SYSDATE
  AND ( DA.FINALVIGENCIA       IS NULL
  OR DA.FINALVIGENCIA          >= SYSDATE );
  IF CONFIGURACAO_ACRESCIMOS.ID = NULL THEN
    RETURN 0;
  END IF;
  IF PARAM_IS_DIVIDA_AJUIZADA <> 1 THEN
    VALOR_HONORARIO           := 0;
  ELSE
    PARAM_VALOR         := ROUND(GETVALORIMPOSTO(PARAM_PARCELA_ID,1), 2) + ROUND(GETVALORTAXA(PARAM_PARCELA_ID,1), 2);
    PARAM_VALOR         := PARAM_VALOR                                   + ROUND(GETVALORJUROS(SYSDATE, PARAM_PARCELA_ID,1), 2) +
ROUND( GETVALORMULTA(SYSDATE,PARAM_PARCELA_ID,1), 2);
    PARAM_VALOR         := PARAM_VALOR                                   + ROUND(GETVALORCORRECAO(PARAM_PARCELA_ID,EXTRACT(YEAR
FROM PARAM_PARCELA_VENCIMENTO),1, SYSDATE), 2);
    PARAM_VALOR := PARAM_VALOR - coalesce(GETVALORDESCONTO(PARAM_PARCELA_ID),0);
    PORCENTAGEM_APLICAR := CONFIGURACAO_ACRESCIMOS.HONORARIOSADVOCATICIOS;
    VALOR_HONORARIO     := (PORCENTAGEM_APLICAR * PARAM_VALOR) / 100;
  END IF;
  VALOR_EMBUTIDO := GETVALORTIPOTRIBUTO(PARAM_ID_PARCELA, 'HONORARIOS');
  IF VALOR_EMBUTIDO > VALOR_HONORARIO THEN
  RETURN VALOR_EMBUTIDO;
  ELSE
    RETURN ROUND(VALOR_HONORARIO,2);
  END IF;
END GETVALORHONORARIOS;
FUNCTION GETVALORPARCELAPAGO(
    PARAM_ID_PARCELA       IN NUMBER,
    PARAM_SITUACAO_PARCELA IN VARCHAR2)
  RETURN NUMBER
AS
  VALOR NUMBER;
BEGIN
  IF PARAM_SITUACAO_PARCELA != 'PAGO' AND PARAM_SITUACAO_PARCELA != 'BAIXADO' AND PARAM_SITUACAO_PARCELA != 'PAGO_REFIS' AND PARAM_SITUACAO_PARCELA != 'PAGO_PARCELAMENTO' AND PARAM_SITUACAO_PARCELA != 'PAGO_SUBVENCAO' THEN
    RETURN 0;
  END IF;
  IF PARAM_SITUACAO_PARCELA = 'PAGO_SUBVENCAO' THEN
   SELECT SUB.TOTAL
    INTO VALOR
    FROM SUBVENCAOPARCELA SUB
    WHERE SUB.ID =( select min(id) from subvencaoparcela where parcelavalordivida_id = PARAM_ID_PARCELA);
    RETURN VALOR;
  END IF;
  IF PARAM_SITUACAO_PARCELA = 'PAGO_PARCELAMENTO' THEN
   SELECT SUM(PGTO.valor)
    INTO VALOR
    FROM MOVIMENTOVALORPARCELAMENTO PGTO
    WHERE pgto.parcela_id = PARAM_ID_PARCELA
    and pgto.parcelamento_id = (select max(parcelamento_id) from MOVIMENTOVALORPARCELAMENTO where parcela_id = PARAM_ID_PARCELA)
      and pgto.tipo = 'PAGAMENTO';
    RETURN VALOR;
  END IF;
  SELECT coalesce(SUM(it.valorpago),sum(itemlotebaixa.valorpago), 0)
  into valor
  FROM ITEMLOTEBAIXA
  left JOIN ITEMLOTEBAIXAPARCELA it
  ON itemlotebaixa.id = it.ITEMLOTEBAIXA_ID
  INNER JOIN LOTEBAIXA
  ON lotebaixa.id = ITEMLOTEBAIXA.LOTEBAIXA_ID
  inner join dam on dam.id = itemlotebaixa.dam_id
  INNER JOIN itemdam
  ON itemdam.dam_id = dam.id
  WHERE (LOTEBAIXA.SITUACAOLOTEBAIXA = 'BAIXADO'
  OR LOTEBAIXA.SITUACAOLOTEBAIXA     = 'BAIXADO_INCONSITENTE')
  AND itemdam.parcela_ID                         = PARAM_ID_PARCELA;
  IF (VALOR                         IS NULL OR VALOR = 0) THEN
    SELECT SUM(PRO.valorpago)
    INTO VALOR
    FROM PROCESSODEBITO pro
    INNER JOIN ITEMPROCESSODEBITO item
    ON item.PROCESSODEBITO_ID = pro.id
    INNER JOIN parcelavalordivida pvd
    ON pvd.id    = item.PARCELA_ID
    WHERE PVD.ID = PARAM_ID_PARCELA;
  END IF;
  IF (VALOR IS NULL OR VALOR = 0) THEN
    SELECT SUM(ATR.valorpago)
    INTO VALOR
    FROM PAGAMENTOAVULSO ATR
    WHERE ATR.PARCELAVALORDIVIDA_ID = PARAM_ID_PARCELA;
  END IF;
  IF(VALOR IS NULL) THEN
    RETURN 0;
  END IF;
  RETURN ROUND(VALOR,2);
END GETVALORPARCELAPAGO;
FUNCTION GETDATAPAGAMENTOPARCELA(
    PARAM_ID_PARCELA       IN NUMBER,
    PARAM_SITUACAO_PARCELA IN VARCHAR2)
  RETURN DATE
AS
  DATAPAG DATE;
BEGIN
  IF PARAM_SITUACAO_PARCELA != 'PAGO' AND PARAM_SITUACAO_PARCELA != 'BAIXADO' AND PARAM_SITUACAO_PARCELA != 'PAGO_REFIS' AND PARAM_SITUACAO_PARCELA != 'PAGO_PARCELAMENTO' AND PARAM_SITUACAO_PARCELA != 'PAGO_SUBVENCAO'  THEN
    RETURN NULL;
  END IF;

 IF PARAM_SITUACAO_PARCELA = 'PAGO_SUBVENCAO' THEN
    SELECT (SIT.DATALANCAMENTO)
    INTO DATAPAG
    FROM SITUACAOPARCELAVALORDIVIDA SIT
    WHERE SIT.PARCELA_ID = PARAM_ID_PARCELA AND SIT.SITUACAOPARCELA = 'PAGO_SUBVENCAO';
    RETURN DATAPAG;
 END IF;

 IF PARAM_SITUACAO_PARCELA = 'PAGO_PARCELAMENTO' THEN
    SELECT MAX(coalesce(OPERACAO.DATA, pgto.dia))
    INTO DATAPAG
    FROM MOVIMENTOVALORPARCELAMENTO PGTO
    INNER JOIN processoparcelamento PARCELAMENTO
    ON parcelamento.id = pgto.parcelamento_id
    left JOIN cancelamentoparcelamento CANCELAMENTO
    ON cancelamento.processoparcelamento_id = parcelamento.id
    left JOIN operacaoparcelavalordivida OPERACAO
    ON operacao.id        = cancelamento.id
    WHERE pgto.parcela_id = PARAM_ID_PARCELA
    and pgto.tipo = 'PAGAMENTO';
    RETURN DATAPAG;
  END IF;
  SELECT MAX(LOTEBAIXA.DATAPAGAMENTO)
  INTO DATAPAG
  FROM ITEMLOTEBAIXAPARCELA it
  INNER JOIN ITEMLOTEBAIXA
  ON itemlotebaixa.id = it.ITEMLOTEBAIXA_ID
  INNER JOIN LOTEBAIXA
  ON lotebaixa.id = ITEMLOTEBAIXA.LOTEBAIXA_ID
  INNER JOIN itemdam
  ON itemdam.id = it.ITEMDAM_ID
  INNER JOIN parcelavalordivida pvd
  ON pvd.id                          = itemdam.PARCELA_ID
  WHERE (LOTEBAIXA.SITUACAOLOTEBAIXA = 'BAIXADO'
  OR LOTEBAIXA.SITUACAOLOTEBAIXA     = 'BAIXADO_INCONSITENTE')
  AND PVD.ID                         = PARAM_ID_PARCELA;
  IF DATAPAG                        IS NULL THEN
    SELECT MAX(PRO.DATAPAGAMENTO)
    INTO DATAPAG
    FROM PROCESSODEBITO pro
    INNER JOIN ITEMPROCESSODEBITO item
    ON item.PROCESSODEBITO_ID = pro.id
    INNER JOIN parcelavalordivida pvd
    ON pvd.id    = item.PARCELA_ID
    WHERE PVD.ID = PARAM_ID_PARCELA;
  END IF;
  IF DATAPAG IS NULL THEN
    SELECT MAX(ATR.DATAPAGAMENTO)
    INTO DATAPAG
    FROM PAGAMENTOAVULSO ATR
    WHERE ATR.PARCELAVALORDIVIDA_ID = PARAM_ID_PARCELA;
  END IF;
  RETURN DATAPAG;
END GETDATAPAGAMENTOPARCELA;
FUNCTION CONTEMINCIDENCIA(
    TIPO_INCIDENCIA           IN VARCHAR2,
    TIPO_ACRESCIMO            IN VARCHAR2,
    CONFIGURACAO_ACRESCIMO_ID IN NUMBER)
  RETURN NUMBER
AS
  RETORNO NUMBER;
BEGIN
  SELECT
    CASE
      WHEN MAX(IA.ID) IS NULL
      THEN 0
      ELSE 1
    END
  INTO RETORNO
  FROM INCIDENCIAACRESCIMO IA
  WHERE IA.CONFIGURACAOACRESCIMOS_ID = CONFIGURACAO_ACRESCIMO_ID
  AND IA.INCIDENCIA                  = TIPO_INCIDENCIA
  AND IA.TIPOACRESCIMO               = TIPO_ACRESCIMO
  AND rownum                         = 1;
  RETURN RETORNO;
END CONTEMINCIDENCIA;
FUNCTION QUANTIDADEIMPRESSOESDAM(
    PARAM_PARCELA_ID IN NUMBER)
  RETURN NUMBER
AS
  RETORNO NUMBER;
BEGIN
  SELECT COUNT(hist.id)
  INTO RETORNO
  FROM itemdam it
  INNER JOIN dam
  ON dam.id = it.dam_id
  INNER JOIN historicoimpressaodam hist
  ON hist.dam_id      = dam.id
  WHERE it.parcela_id = PARAM_PARCELA_ID;
  RETURN RETORNO;
EXCEPTION
WHEN NO_DATA_FOUND THEN
  RETURN 0;
END QUANTIDADEIMPRESSOESDAM;
FUNCTION PGTOPARCCANCPARCELAMENTO(
    PARAM_PARCELA_ID IN NUMBER)
  RETURN NUMBER
AS
  RETORNO NUMBER;
BEGIN
  SELECT SUM(valor)
  INTO RETORNO
  FROM MOVIMENTOVALORPARCELAMENTO PGTO
  WHERE PGTO.PARCELA_ID= PARAM_PARCELA_ID
  AND PGTO.TIPO = 'PAGAMENTO';
 --RETURN RETORNO;

  IF RETORNO IS NULL THEN
     SELECT SUM(VALORPAGO)
     INTO RETORNO
     FROM PAGAMENTOAVULSO PGTO
     WHERE PGTO.PARCELAVALORDIVIDA_ID= PARAM_PARCELA_ID and coalesce(PGTO.ATIVO, 0) =  1;
    END IF;
  RETURN RETORNO;

EXCEPTION
WHEN NO_DATA_FOUND THEN
  RETURN 0;
END PGTOPARCCANCPARCELAMENTO;
FUNCTION GETVALORIMPOSTO(
    PARAM_PARCELA_ID IN NUMBER,
    CALCULA_DESCONTO IN NUMBER)
  RETURN NUMBER
AS
  RETORNO            NUMBER;
  JUROS              NUMBER;
  MULTA              NUMBER;
  CORRECAO           NUMBER;
  PAGTO_PARCELAMENTO NUMBER;
  VENCIMENTO DATE;
  SITUACAO_PARCELA VARCHAR2(75);
  VALOR_PAGO         NUMBER;
BEGIN
  SELECT SPVD.situacaoparcela
  INTO SITUACAO_PARCELA
  FROM SITUACAOPARCELAVALORDIVIDA SPVD
  WHERE SPVD.id = getultimasituacao(PARAM_PARCELA_ID);

  IF SITUACAO_PARCELA = 'PAGO_PARCELAMENTO' THEN
    SELECT ipp.imposto
    INTO RETORNO
    FROM itemprocessoparcelamento IPP
    WHERE IPP.ID =( select max(id) from itemprocessoparcelamento where parcelavalordivida_id = PARAM_PARCELA_ID);
    RETURN ROUND(RETORNO,2);
  END IF;

  IF SITUACAO_PARCELA = 'PARCELADO' THEN
    SELECT SUM(IPP.IMPOSTO)
    INTO RETORNO
    FROM itemprocessoparcelamento IPP
    INNER JOIN processoparcelamento pp
    ON pp.id                        = ipp.processoparcelamento_id
    WHERE IPP.PARCELAVALORDIVIDA_ID = PARAM_PARCELA_ID
    AND IPP.ID =( select max(id) from itemprocessoparcelamento where parcelavalordivida_id = PARAM_PARCELA_ID);
    RETURN ROUND(RETORNO,2);
  END IF;

  RETORNO              := GETVALORTIPOTRIBUTO(PARAM_PARCELA_ID, 'IMPOSTO');
  IF SITUACAO_PARCELA <> 'EM_ABERTO' THEN
    RETURN RETORNO;
  END IF;
  IF CALCULA_DESCONTO   =1 THEN
    PAGTO_PARCELAMENTO := PGTOPARCCANCPARCELAMENTO(PARAM_PARCELA_ID);
    JUROS              := GETVALORJUROS( SYSDATE, PARAM_PARCELA_ID, 0);
    MULTA              := GETVALORMULTA( SYSDATE, PARAM_PARCELA_ID, 0);
    SELECT VENCIMENTO
    INTO VENCIMENTO
    FROM PARCELAVALORDIVIDA
    WHERE ID                 = PARAM_PARCELA_ID;
    CORRECAO                := GETVALORCORRECAO(PARAM_PARCELA_ID, EXTRACT(YEAR FROM VENCIMENTO),0, SYSDATE);
    IF PAGTO_PARCELAMENTO   >= (JUROS             + MULTA + CORRECAO) THEN
      PAGTO_PARCELAMENTO    := PAGTO_PARCELAMENTO - (JUROS + MULTA + CORRECAO);
      IF PAGTO_PARCELAMENTO >= RETORNO THEN
        RETORNO             := 0;
      ELSE
        RETORNO := RETORNO - PAGTO_PARCELAMENTO;
      END IF;
    END IF;
  END IF;
  RETURN RETORNO;
EXCEPTION
WHEN NO_DATA_FOUND THEN
  RETURN 0;
END GETVALORIMPOSTO;
FUNCTION GETVALORTAXA(
    PARAM_PARCELA_ID IN NUMBER,
    CALCULA_DESCONTO IN NUMBER)
  RETURN NUMBER
AS
  RETORNO            NUMBER;
  JUROS              NUMBER;
  MULTA              NUMBER;
  CORRECAO           NUMBER;
  IMPOSTO            NUMBER;
  PAGTO_PARCELAMENTO NUMBER;
  VENCIMENTO DATE;
  SITUACAO_PARCELA VARCHAR2(75);
  VALOR_PAGO         NUMBER;
BEGIN
  SELECT SPVD.situacaoparcela
  INTO SITUACAO_PARCELA
  FROM SITUACAOPARCELAVALORDIVIDA SPVD
  WHERE SPVD.id = getultimasituacao(PARAM_PARCELA_ID);

  IF SITUACAO_PARCELA = 'PAGO_PARCELAMENTO' THEN
    SELECT ipp.taxa
    INTO RETORNO
    FROM itemprocessoparcelamento IPP
    WHERE IPP.ID =( select max(id) from itemprocessoparcelamento where parcelavalordivida_id = PARAM_PARCELA_ID);
    RETURN ROUND(RETORNO,2);
  END IF;
  IF SITUACAO_PARCELA = 'PARCELADO' THEN
    SELECT SUM(IPP.TAXA)
    INTO RETORNO
    FROM itemprocessoparcelamento IPP
    INNER JOIN processoparcelamento pp
    ON pp.id                        = ipp.processoparcelamento_id
    WHERE IPP.PARCELAVALORDIVIDA_ID = PARAM_PARCELA_ID
    AND IPP.ID =( select max(id) from itemprocessoparcelamento where parcelavalordivida_id = PARAM_PARCELA_ID);
    RETURN ROUND(RETORNO,2);
  END IF;
  RETORNO              := GETVALORTIPOTRIBUTO(PARAM_PARCELA_ID, 'TAXA');
   IF SITUACAO_PARCELA <> 'EM_ABERTO' THEN
    RETURN RETORNO;
  END IF;
  IF CALCULA_DESCONTO   =1 THEN
    PAGTO_PARCELAMENTO := PGTOPARCCANCPARCELAMENTO(PARAM_PARCELA_ID);
    JUROS              := GETVALORJUROS( SYSDATE, PARAM_PARCELA_ID, 0);
    MULTA              := GETVALORMULTA( SYSDATE, PARAM_PARCELA_ID, 0);
    SELECT VENCIMENTO
    INTO VENCIMENTO
    FROM PARCELAVALORDIVIDA
    WHERE ID                 = PARAM_PARCELA_ID;
    CORRECAO                := GETVALORCORRECAO(PARAM_PARCELA_ID, EXTRACT(YEAR FROM VENCIMENTO),0, SYSDATE);
    IMPOSTO                 := GETVALORIMPOSTO(PARAM_PARCELA_ID,0);
    IF PAGTO_PARCELAMENTO   >= (JUROS             + MULTA + CORRECAO+ IMPOSTO) THEN
      PAGTO_PARCELAMENTO    := PAGTO_PARCELAMENTO - (JUROS + MULTA + CORRECAO + IMPOSTO);
      IF PAGTO_PARCELAMENTO >= RETORNO THEN
        RETORNO             := 0;
      ELSE
        RETORNO := RETORNO - PAGTO_PARCELAMENTO;
      END IF;
    END IF;
  END IF;
  RETURN RETORNO;
EXCEPTION
WHEN NO_DATA_FOUND THEN
  RETURN 0;
END GETVALORTAXA;
END PACOTE_CONSULTA_DE_DEBITOS;