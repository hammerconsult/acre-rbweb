create or replace PACKAGE BODY PACOTE_CONSULTA_DE_DEBITOS
AS
FUNCTION GETVALORJUROS(
    PARAM_DATA_VENCIMENTO IN DATE ,
    PARAM_DATA_OPERACAO   IN DATE ,
    PARAM_DIVIDA_ID       IN NUMBER ,
    PARAM_VALOR           IN NUMBER ,
    PARAM_IS_DIVIDA_ATIVA IN NUMBER )
  RETURN NUMBER
AS
  TIPO_APLIC_ACRESCIMO_EXCEPTION EXCEPTION;
  CONFIGURACAO_ACRESCIMOS CONFIGURACAOACRESCIMOS%ROWTYPE;
  VALOR_JUROS              NUMBER;
  MULTIPLICADOR            NUMBER;
  DIFERENCA_DIAS           NUMBER;
  DIFERENCA_MESES          NUMBER;
  DIFERENCA_ANOS           NUMBER;
  QTDADE_DIAS_MES_ANTERIOR NUMBER;
BEGIN
  IF PARAM_DATA_VENCIMENTO >= PARAM_DATA_OPERACAO THEN
    RETURN 0;
  END IF;
  SELECT
    CA.*
  INTO
    CONFIGURACAO_ACRESCIMOS
  FROM
    DIVIDAACRESCIMO DA
  INNER JOIN CONFIGURACAOACRESCIMOS CA
  ON
    CA.ID = DA.ACRESCIMO_ID
  WHERE
    DA.DIVIDA_ID         = PARAM_DIVIDA_ID
  AND DA.INICIOVIGENCIA <= SYSDATE
  AND
    (
      DA.FINALVIGENCIA  IS NULL
    OR DA.FINALVIGENCIA >= SYSDATE
    );
  IF CONFIGURACAO_ACRESCIMOS.ID = NULL THEN
    RETURN 0;
  END IF;
  DIFERENCA_DIAS    := PARAM_DATA_OPERACAO - PARAM_DATA_VENCIMENTO;
  DIFERENCA_MESES   := DIFERENCA_DIAS      / 30;
  DIFERENCA_ANOS    := DIFERENCA_DIAS      / 365;
  IF DIFERENCA_MESES < 0 THEN
    DIFERENCA_MESES := DIFERENCA_MESES + 12;
    DIFERENCA_ANOS  := DIFERENCA_ANOS  - 1;
  END IF;
  SELECT
    TO_NUMBER(TO_CHAR(LAST_DAY(PARAM_DATA_OPERACAO),'dd'))
  INTO
    QTDADE_DIAS_MES_ANTERIOR
  FROM
    DUAL;
  IF DIFERENCA_DIAS < 0 THEN
    DIFERENCA_DIAS  := DIFERENCA_DIAS  + QTDADE_DIAS_MES_ANTERIOR;
    DIFERENCA_MESES := DIFERENCA_MESES - 1;
  END IF;
  IF CONFIGURACAO_ACRESCIMOS.JUROSFRACIONADO = 1 THEN
    MULTIPLICADOR                           := (DIFERENCA_ANOS * 12) +
    DIFERENCA_MESES                                            + (
    DIFERENCA_DIAS                                             /
    QTDADE_DIAS_MES_ANTERIOR);
  ELSE
    IF DIFERENCA_DIAS  > 0 THEN
      DIFERENCA_MESES := DIFERENCA_MESES + 1;
      MULTIPLICADOR   := (DIFERENCA_ANOS * 12) + DIFERENCA_MESES;
    END IF;
  END IF;
  MULTIPLICADOR           := MULTIPLICADOR / 100;
  IF PARAM_IS_DIVIDA_ATIVA = 1 THEN
    VALOR_JUROS           := (PARAM_VALOR * MULTIPLICADOR) *
    CONFIGURACAO_ACRESCIMOS.VALORJUROSDIVIDAATIVA;
  ELSE
    VALOR_JUROS := (PARAM_VALOR * MULTIPLICADOR) *
    CONFIGURACAO_ACRESCIMOS.VALORJUROSEXERCICIO;
  END IF;
  IF CONFIGURACAO_ACRESCIMOS.TIPOAPLICACRESCIMOJUROS   = 'PRINCIPAL_MULTA' THEN
    IF CONFIGURACAO_ACRESCIMOS.TIPOAPLICACRESCIMOMULTA = 'PRINCIPAL_JUROS' THEN
      RAISE TIPO_APLIC_ACRESCIMO_EXCEPTION;
    END IF;
    VALOR_JUROS := VALOR_JUROS + GETVALORMULTA(PARAM_DATA_VENCIMENTO,
    PARAM_DATA_OPERACAO, PARAM_DIVIDA_ID, PARAM_VALOR, PARAM_IS_DIVIDA_ATIVA);
  END IF;
  RETURN VALOR_JUROS;
EXCEPTION
WHEN NO_DATA_FOUND THEN
  RETURN 0;
WHEN TIPO_APLIC_ACRESCIMO_EXCEPTION THEN
  RAISE_APPLICATION_ERROR (-20000, 'TIPO DE APLICAÇÃO DE ACRÉSCIMO INVÁLIDO!');
END GETVALORJUROS;
FUNCTION GETVALORMULTA(
    PARAM_DATA_VENCIMENTO IN DATE ,
    PARAM_DATA_OPERACAO   IN DATE ,
    PARAM_DIVIDA_ID       IN NUMBER ,
    PARAM_VALOR           IN NUMBER ,
    PARAM_IS_DIVIDA_ATIVA IN NUMBER )
  RETURN NUMBER
AS
  TIPO_APLIC_ACRESCIMO_EXCEPTION EXCEPTION;
  CONFIGURACAO_ACRESCIMOS CONFIGURACAOACRESCIMOS%ROWTYPE;
  ITEM_CONFIGURACAO_VALOR NUMBER;
  QTDADE_DIAS_ATRASO      NUMBER;
  PERCENTUAL_MULTA        NUMBER;
  VALOR_MULTA             NUMBER;
BEGIN
  PERCENTUAL_MULTA         := 0;
  QTDADE_DIAS_ATRASO       := 0;
  IF PARAM_DATA_VENCIMENTO >= PARAM_DATA_OPERACAO THEN
    RETURN 0;
  END IF;
  SELECT
    CA.*
  INTO
    CONFIGURACAO_ACRESCIMOS
  FROM
    DIVIDAACRESCIMO DA
  INNER JOIN CONFIGURACAOACRESCIMOS CA
  ON
    CA.ID = DA.ACRESCIMO_ID
  WHERE
    DA.DIVIDA_ID         = PARAM_DIVIDA_ID
  AND DA.INICIOVIGENCIA <= SYSDATE
  AND
    (
      DA.FINALVIGENCIA  IS NULL
    OR DA.FINALVIGENCIA >= SYSDATE
    );
  IF CONFIGURACAO_ACRESCIMOS.ID = NULL THEN
    RETURN 0;
  END IF;
  QTDADE_DIAS_ATRASO      := PARAM_DATA_OPERACAO - PARAM_DATA_VENCIMENTO;
  IF PARAM_IS_DIVIDA_ATIVA = 0 THEN
    SELECT
      VALOR
    INTO
      ITEM_CONFIGURACAO_VALOR
    FROM
      ITEMCONFIGURACAOACRESCIMOS
    WHERE
      QNTDIAS                     > QTDADE_DIAS_ATRASO
    AND CONFIGURACAOACRESCIMOS_ID = CONFIGURACAO_ACRESCIMOS.ID
    AND ROWNUM                    = 1
    ORDER BY
      QNTDIAS;
    IF ITEM_CONFIGURACAO_VALOR != NULL THEN
      PERCENTUAL_MULTA         := ITEM_CONFIGURACAO_VALOR / 100;
    END IF;
  ELSE
    PERCENTUAL_MULTA := CONFIGURACAO_ACRESCIMOS.VALORDIVIDAATIVAMULTA / 100;
  END IF;
  VALOR_MULTA                                         := PARAM_VALOR * PERCENTUAL_MULTA;
  IF CONFIGURACAO_ACRESCIMOS.TIPOAPLICACRESCIMOMULTA   = 'PRINCIPAL_JUROS' THEN
    IF CONFIGURACAO_ACRESCIMOS.TIPOAPLICACRESCIMOJUROS = 'PRINCIPAL_MULTA' THEN
      RAISE TIPO_APLIC_ACRESCIMO_EXCEPTION;
    END IF;
    VALOR_MULTA := VALOR_MULTA + GETVALORJUROS(PARAM_DATA_VENCIMENTO,
    PARAM_DATA_OPERACAO, PARAM_DIVIDA_ID, PARAM_VALOR, PARAM_IS_DIVIDA_ATIVA);
  END IF;
  RETURN VALOR_MULTA;
EXCEPTION
WHEN NO_DATA_FOUND THEN
  RETURN 0;
WHEN TIPO_APLIC_ACRESCIMO_EXCEPTION THEN
  RAISE_APPLICATION_ERROR (-20000, 'TIPO DE APLICAÇÃO DE ACRÉSCIMO INVÁLIDO!');
END GETVALORMULTA;
FUNCTION GETVALORCORRIGIDO(
    PARAM_SALDO                 IN NUMBER,
    PARAM_PARCELA_ID            IN NUMBER,
    PARAM_DATA_REGISTRO_PARCELA IN DATE,
    PARAM_EXERCICIO_ANO         IN NUMBER)
  RETURN NUMBER
IS
  VALORCORRIGIDO NUMBER;
BEGIN
  SELECT
    CASE
      WHEN PARAM_SALDO > 0
      THEN COALESCE((PARAM_SALDO/COALESCE(
        (
          SELECT
            MOEDADATAPARCELA.VALOR
          FROM
            MOEDA MOEDADATAPARCELA
          INNER JOIN INDICEECONOMICO INDICEDATAPARCELA
          ON
            INDICEDATAPARCELA.ID = MOEDADATAPARCELA.INDICEECONOMICO_ID
          WHERE
            MOEDADATAPARCELA.MES = TO_NUMBER(TO_CHAR(PARAM_DATA_REGISTRO_PARCELA,'MM'))
          AND MOEDADATAPARCELA.ANO        = PARAM_EXERCICIO_ANO
          AND INDICEDATAPARCELA.DESCRICAO = 'UFM'
        )
        , 1)) * COALESCE(
        (
          SELECT
            MOEDAATUAL.VALOR
          FROM
            MOEDA MOEDAATUAL
          INNER JOIN INDICEECONOMICO INDICEATUAL
          ON
            INDICEATUAL.ID = MOEDAATUAL.INDICEECONOMICO_ID
          WHERE
            MOEDAATUAL.MES          = TO_NUMBER(TO_CHAR(SYSDATE,'MM'))
          AND MOEDAATUAL.ANO        = TO_NUMBER(TO_CHAR(SYSDATE,'YYYY'))
          AND INDICEATUAL.DESCRICAO = 'UFM'
        )
        , 1), 0)
      ELSE COALESCE(
        (
          SELECT
            SUM(ilb.valorpago)
          FROM
            itemdam it
          INNER JOIN dam d
          ON
            d.id = it.dam_id
          INNER JOIN itemlotebaixa ilb
          ON
            ilb.dam_id = d.id
          INNER JOIN lotebaixa lb
          ON
            lb.id = ilb.lotebaixa_id
          WHERE
            it.parcela_id           = PARAM_PARCELA_ID
          AND lb.situacaolotebaixa IN ('BAIXADO','BAIXADO_INCONSITENTE')
        )
        ,0)
    END
  INTO
    VALORCORRIGIDO
  FROM
    DUAL;
  RETURN VALORCORRIGIDO;
END GETVALORCORRIGIDO;
FUNCTION GETVALORDESCONTO(
    PARAM_PARCELA_ID IN NUMBER )
  RETURN NUMBER
AS
  VALOR_DESCONTO NUMBER;
BEGIN
  SELECT
    COALESCE(SUM(item.valor * (desconto.porcentagemDesconto/100)),0)
  INTO
    VALOR_DESCONTO
  FROM
    descontoitemparcela desconto
  INNER JOIN itemparcelavalordivida item
  ON
    item.id = desconto.itemparcelavalordivida_id
  WHERE
    item.parcelavalordivida_id     = PARAM_PARCELA_ID
  AND desconto.porcentagemdesconto > 0;
  RETURN VALOR_DESCONTO;
END GETVALORDESCONTO;
FUNCTION GETVALORIMPOSTO(
    PARAM_PARCELA_VALOR          IN NUMBER ,
    PARAM_PARCELA_ID             IN NUMBER ,
    PARAM_SITUACAO_PARCELA_SALDO IN NUMBER )
  RETURN NUMBER
AS
  VALOR_IMPOSTO NUMBER;
BEGIN
  SELECT
    CASE
      WHEN PARAM_PARCELA_VALOR         > 0
      AND PARAM_SITUACAO_PARCELA_SALDO > 0
      THEN COALESCE((
        (
          SELECT
            COALESCE(SUM(i.valor),0)
          FROM
            itemparcelavalordivida i
          INNER JOIN itemvalordivida iv
          ON
            iv.id = i.itemvalordivida_id
          INNER JOIN tributo t
          ON
            t.id = iv.tributo_id
          WHERE
            i.parcelavalordivida_id = PARAM_PARCELA_ID
          AND t.tipotributo         = 'IMPOSTO'
        )
        * PARAM_SITUACAO_PARCELA_SALDO), 0) / COALESCE(PARAM_PARCELA_VALOR, 0)
      WHEN PARAM_PARCELA_VALOR          > 0
      AND PARAM_SITUACAO_PARCELA_SALDO <= 0
      THEN COALESCE((
        (
          SELECT
            COALESCE(SUM(i.valor),0)
          FROM
            itemparcelavalordivida i
          INNER JOIN itemvalordivida iv
          ON
            iv.id = i.itemvalordivida_id
          INNER JOIN tributo t
          ON
            t.id = iv.tributo_id
          WHERE
            i.parcelavalordivida_id = PARAM_PARCELA_ID
          AND t.tipotributo         = 'IMPOSTO'
        )
        *
        (
          SELECT
            COALESCE(sum(ilb.valorpago), 0)
          FROM
            itemdam it
          INNER JOIN dam d
          ON
            d.id = it.dam_id
          INNER JOIN itemlotebaixa ilb
          ON
            ilb.dam_id = d.id
          INNER JOIN lotebaixa lb
          ON
            lb.id = ilb.lotebaixa_id
          WHERE
            it.parcela_id           = PARAM_PARCELA_ID
          AND lb.situacaolotebaixa IN ('BAIXADO','BAIXADO_INCONSITENTE')
        )
        ),0) / COALESCE(PARAM_PARCELA_VALOR, 0)
      ELSE 0
    END
  INTO
    VALOR_IMPOSTO
  FROM
    DUAL;
  RETURN VALOR_IMPOSTO;
END GETVALORIMPOSTO;
FUNCTION GETVALORTAXA(
    PARAM_PARCELA_VALOR          IN NUMBER ,
    PARAM_PARCELA_ID             IN NUMBER ,
    PARAM_SITUACAO_PARCELA_SALDO IN NUMBER)
  RETURN NUMBER
AS
  VALOR_TAXA NUMBER;
BEGIN
  SELECT
    CASE
      WHEN PARAM_PARCELA_VALOR         > 0
      AND PARAM_SITUACAO_PARCELA_SALDO > 0
      THEN COALESCE((
        (
          SELECT
            COALESCE(SUM( i.valor ),0)
          FROM
            itemparcelavalordivida i
          INNER JOIN itemvalordivida iv
          ON
            iv.id = i.itemvalordivida_id
          INNER JOIN tributo t
          ON
            t.id = iv.tributo_id
          WHERE
            i.parcelavalordivida_id = PARAM_PARCELA_ID
          AND t.tipotributo        <> 'IMPOSTO'
        )
        * PARAM_SITUACAO_PARCELA_SALDO), 0) / COALESCE(PARAM_PARCELA_VALOR, 0 )
      WHEN PARAM_PARCELA_VALOR          > 0
      AND PARAM_SITUACAO_PARCELA_SALDO <= 0
      THEN COALESCE((
        (
          SELECT
            COALESCE(SUM( i.valor ),0)
          FROM
            itemparcelavalordivida i
          INNER JOIN itemvalordivida iv
          ON
            iv.id = i.itemvalordivida_id
          INNER JOIN tributo t
          ON
            t.id = iv.tributo_id
          WHERE
            i.parcelavalordivida_id = PARAM_PARCELA_ID
          AND t.tipotributo        <> 'IMPOSTO'
        )
        *
        (
          SELECT
            COALESCE(sum(ilb.valorpago), 0)
          FROM
            itemdam it
          INNER JOIN dam d
          ON
            d.id = it.dam_id
          INNER JOIN itemlotebaixa ilb
          ON
            ilb.dam_id = d.id
          INNER JOIN lotebaixa lb
          ON
            lb.id = ilb.lotebaixa_id
          WHERE
            it.parcela_id           = PARAM_PARCELA_ID
          AND lb.situacaolotebaixa IN ('BAIXADO','BAIXADO_INCONSITENTE')
        )
        ),0) / COALESCE(PARAM_PARCELA_VALOR, 0)
      ELSE 0
    END
  INTO
    VALOR_TAXA
  FROM
    DUAL;
  RETURN VALOR_TAXA;
END GETVALORTAXA;
FUNCTION GETNUMEROPARCELA(
      PARAM_ID_VALOR_DIVIDA    IN NUMBER ,
      PARAM_ID_OPCAO_PAGAMENTO IN NUMBER ,
      PARAM_PROMOCIONAL        IN NUMBER ,
      PARAM_SEQUENCIA_PARCELA  IN VARCHAR2 )
    RETURN VARCHAR2
  AS
    NUMERO_PARCELA VARCHAR2(30);
  BEGIN
    SELECT
      CASE
        WHEN PARAM_PROMOCIONAL = 1
        THEN (COALESCE(PARAM_SEQUENCIA_PARCELA,'')
          || '/0 UN')
        ELSE (COALESCE(PARAM_SEQUENCIA_PARCELA,'')
          ||'/'
          || TO_CHAR(
          (
            SELECT
              COUNT(p.id)
            FROM
              ParcelaValorDivida p
            INNER JOIN valordivida v
            ON
              v.id = p.valordivida_id
            WHERE
              v.id                  = PARAM_ID_VALOR_DIVIDA
            AND p.opcaoPagamento_id = PARAM_ID_OPCAO_PAGAMENTO
          )
          ))
      END
    INTO
      NUMERO_PARCELA
    FROM
      DUAL;
    RETURN NUMERO_PARCELA;
  END GETNUMEROPARCELA;
FUNCTION GETVALORHONORARIOS(
    PARAM_DIVIDA_ID       IN NUMBER ,
    PARAM_VALOR           IN NUMBER ,
    PARAM_IS_DIVIDA_AJUIZADA IN NUMBER )
    RETURN NUMBER
AS
  TIPO_APLIC_ACRESCIMO_EXCEPTION EXCEPTION;
  CONFIGURACAO_ACRESCIMOS CONFIGURACAOACRESCIMOS%ROWTYPE;
  VALOR_HONORARIO          NUMBER;
  PORCENTAGEM_APLICAR      NUMBER;
BEGIN
  SELECT
    CA.*
  INTO
    CONFIGURACAO_ACRESCIMOS
  FROM
    DIVIDAACRESCIMO DA
  INNER JOIN CONFIGURACAOACRESCIMOS CA
  ON
    CA.ID = DA.ACRESCIMO_ID
  WHERE
    DA.DIVIDA_ID         = PARAM_DIVIDA_ID
  AND DA.INICIOVIGENCIA <= SYSDATE
  AND
    (
      DA.FINALVIGENCIA  IS NULL
    OR DA.FINALVIGENCIA >= SYSDATE
    );
  IF CONFIGURACAO_ACRESCIMOS.ID = NULL THEN
    RETURN 0;
  END IF;
  IF PARAM_IS_DIVIDA_AJUIZADA <> 1 THEN
    VALOR_HONORARIO := 0;
  ELSE
   PORCENTAGEM_APLICAR           :=  CONFIGURACAO_ACRESCIMOS.HONORARIOSADVOCATICIOS;
   VALOR_HONORARIO := (PORCENTAGEM_APLICAR * PARAM_VALOR) / 100;
   END IF;
  return VALOR_HONORARIO;
END GETVALORHONORARIOS;
END PACOTE_CONSULTA_DE_DEBITOS;